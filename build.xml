<?xml version="1.0" encoding="UTF-8"?>
<project name="Memoranda" default="package" basedir="." xmlns:jacoco="antlib:org.jacoco.ant" xmlns:cs="antlib:com.puppycrawl.tools.checkstyle.ant">
	<!-- Build.xml file initially created by Kenneth J. Pouncey              -->
	<!-- on 5 september 2003.                                                -->
	<!-- Kenneth is the project-leader of the tn5250j-project on SourceForge -->
	<!-- Thank you dude for your contribution to our project !               -->
	<!-- You can reach him through email : kjpou@pt.lu                       -->
	<!--=====================================================================-->
	<!--$Id: build.xml,v 1.18 2007/04/06 21:12:24 alexeya Exp $-->
	<!-- set global properties for this build -->
	<property name="name"                  value="memoranda"/>
	<property name="version"               value="2.0"/>
	<property name="source.dir"            value="${basedir}/src"/>
	<property name="lib.dir"               value="${basedir}/lib"/>
	<property name="build.dir"             value="${basedir}/build"/>
	<property name="build.classes.dir"     value="${build.dir}"/>
	<property name="main.class"            value="net.sf.memoranda.Start"/>
    <property name="tests.dir"             value="${build.dir}/tests"/>
    <property name="tests.junit.dir"       value="${tests.dir}/junit"/>
	<property name="tests.jacoco.dir"      value="${tests.dir}/jacoco"/>
	<property name="tests.findbugs.dir"    value="${tests.dir}/findbugs"/>
	<property name="tests.checkstyle.dir"  value="${tests.dir}/checkstyle"/>
	<property name="jarname"               value="${name}.jar"/>
	<property name="dist.dir"              value="${basedir}/dist"/>
	<!-- <property name="runtime.classpath" 	   value="../lib/xom-1.0.jar ../lib/xercesImpl.jar ../lib/xmlParserAPIs.jar ../lib/nekohtml.jar ../lib/nekohtmlXni.jar ../lib/slf4j-simple-1.7.20.jar ../lib/slf4j-api-1.7.20.jar ../lib/ical4j-2.0-beta1.jar ../lib/commons-codec-1.10.jar"/> -->
	<property name="runtime.classpath" 	   value="../lib/asm-debug-all-5.0.2.jar ../lib/bcel-6.0-SNAPSHOT.jar ../lib/checkstyle-6.15-all.jar ../lib/commons-codec-1.10.jar ../lib/commons-io-2.4.jar ../lib/commons-lang-2.6.jar ../lib/commons-lang3-3.3.2.jar ../lib/dom4j-1.6.1.jar ../lib/findbugs.jar ../lib/findbugs-ant.jar ../lib/ical4j-2.0-beta1.jar ../lib/jacocoagent.jar ../lib/jacocoant.jar ../lib/jaxen-1.1.6.jar ../lib/jFormatString.jar ../lib/jsr305.jar ../lib/junit-4.10.jar ../lib/nekohtml.jar ../lib/nekohtmlXni.jar ../lib/slf4j-api-1.7.20.jar ../lib/slf4j-simple-1.7.20.jar ../lib/swag.jar ../lib/swexpl.jar ../lib/xercesImpl.jar ../lib/xmlParserAPIs.jar ../lib/xom-1.0.jar"/>
	<!-- compile options -->
	<property name="debug"       value="off"/>
	<property name="debuglevel"  value="lines,vars,source"/>
	<property name="optimize"    value="off"/>
	<property name="deprecation" value="off"/>
	
	<taskdef resource="org/jacoco/ant/antlib.xml"
	            uri="antlib:org.jacoco.ant"
	            classpath="${lib.dir}/jacocoant.jar"/>
	
	<taskdef name="findbugs"
	           classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
	           classpath="${lib.dir}/findbugs-ant.jar"/>
	
	<taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
	         classpath="lib/checkstyle-6.15-all.jar"/>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build.dir}"/>
	</target>
	<!-- classpath -->
	<path id="classpath">
		<pathelement path="${build.classes.dir}"/>
		<fileset dir="lib">
			<include name="*.jar"/>
			<include name="*.zip"/>
		</fileset>
	</path>
	
	
	<!-- =================================================================== -->
	<!-- Creates the Jar                                                     -->
	<!-- =================================================================== -->
	<target name="package" depends="clean,compile" description="Create a Jar-File of your compiled classes">
		<tstamp>
			<format property="ts" pattern="MM/dd/yyyy HH:mm:ss z"/>
		</tstamp>
		
		<jar jarfile="${build.dir}/${jarname}">
			<fileset dir="${build.classes.dir}" includes="*net/**"/>
			<manifest>
				<attribute name="Main-Class" value="${main.class}"/>
				<attribute name="Class-Path" value="${runtime.classpath}"/>
				<attribute name="Implementation-Title" value="${name}"/>
				<attribute name="Implementation-Version" value="${version}"/>
				<attribute name="Implementation-Vendor" value="http://memoranda.sf.net"/>
				<attribute name="Build-Id" value="${DSTAMP}.${build.number} (${ts} ${user.name} [${os.name} ${os.version} ${os.arch}])"/>
			</manifest>
		</jar>
	</target>
	<target name="compile" depends="init">
		<!-- Compile the java code from ${src} into ${build} -->
		<buildnumber/>
		<move file="${source.dir}/net/sf/memoranda/ui/App.java" tofile="${source.dir}/net/sf/memoranda/ui/~~App.java"/>
		<copy file="${source.dir}/net/sf/memoranda/ui/~~App.java" tofile="${source.dir}/net/sf/memoranda/ui/App.java"/>
		<replace file="${source.dir}/net/sf/memoranda/ui/App.java" token="@VERSION@" value="${version}"/>
		<replace file="${source.dir}/net/sf/memoranda/ui/App.java" token="@BUILD@" value="${DSTAMP}.${build.number}"/>
		<javac srcdir="${source.dir}" destdir="${build.classes.dir}" excludes="**/Cvs/**,**/*.ini,**/~*" debug="${debug}" debuglevel="${debuglevel}" optimize="${optimize}" deprecation="${deprecation}" failonerror="false" source="1.8" target="1.8" encoding="utf-8">
			<!-- <compilerarg value="-Xlint:unchecked"/> -->
			<classpath>
				<path refid="classpath"/>
			</classpath>
		</javac>
		<move file="${source.dir}/net/sf/memoranda/ui/~~App.java" tofile="${source.dir}/net/sf/memoranda/ui/App.java"/>
		<delete file="${source.dir}/net/sf/memoranda/ui/~~App.java"/>
		<copy todir="${build.classes.dir}/net/sf/memoranda/ui/resources">
			<fileset dir="${source.dir}/net/sf/memoranda/ui/resources"/>
		</copy>
		<copy todir="${build.classes.dir}/net/sf/memoranda/ui/htmleditor/resources">
			<fileset dir="${source.dir}/net/sf/memoranda/ui/htmleditor/resources"/>
		</copy>
		<copy todir="${build.classes.dir}/net/sf/memoranda/util/resources">
			<fileset dir="${source.dir}/net/sf/memoranda/util/resources"/>
		</copy>
		<copy todir="${build.classes.dir}/net/sf/memoranda/util/localmessages">
			<fileset dir="${source.dir}/net/sf/memoranda/util/localmessages"/>
		</copy>
		<copy todir="${basedir}/build">
			<fileset dir="." includes="tasklist.dtd"/>
		</copy>
	</target>
	<target name="checkbuild">
		<available file="${build.dir}/${jarname}" property="build.present"/>
	</target>
	<target name="build-if-needed" depends="checkbuild" unless="build.present">
		<antcall target="package"/>
	</target>
	<target name="dist-full" depends="init, build-if-needed">
		<!-- Create the full distribution includes:
    build (build\)
    sources (src\)
    dependencies (\lib)    
    -->
		<property name="dist.content.dir" value="${dist.dir}/${name}${version}-${DSTAMP}"/>
		<mkdir dir="${dist.content.dir}"/>
		<copy todir="${dist.content.dir}/src">
			<fileset dir="${source.dir}"/>
		</copy>
		<copy todir="${dist.content.dir}/build">
			<fileset dir="${build.dir}" includes="*.jar"/>
		</copy>
		<copy todir="${dist.content.dir}/lib">
			<fileset dir="${lib.dir}"/>
		</copy>
		<copy todir="${dist.content.dir}">
			<fileset dir="." includes="build.xml"/>
		</copy>
		<copy todir="${dist.content.dir}">
			<fileset dir="." includes="LICENSE"/>
		</copy>
		<copy todir="${dist.content.dir}">
			<fileset dir="." includes="memoranda.bat"/>
		</copy>
		<copy todir="${dist.content.dir}">
			<fileset dir="." includes="memoranda.sh"/>
		</copy>
		<copy todir="${dist.content.dir}">
			<fileset dir="." includes="README.txt"/>
		</copy>
		<copy todir="${dist.content.dir}">
			<fileset dir="." includes="tasklist.dtd"/>
		</copy>
		<zip zipfile="${dist.dir}/${name}${version}-${DSTAMP}.zip">
			<fileset dir="${dist.dir}" includes="${name}${version}-${DSTAMP}/**"/>
		</zip>
	</target>	
	
	<target name="dist" depends="init, clean-dist">		
		<antcall target="dist-full"/>
	</target>
    
	<target name="clean">
		<!-- Delete the ${build} directory tree -->
		<delete dir="${build.dir}"/>
		<!--<delete dir="${dist.dir}"/>-->
	</target>
    
    <target name="clean-dist">
		<delete dir="${dist.dir}"/>
	</target>
	
	<!-- =================================================================== -->
	<!-- Runs the compiled program                                           -->
	<!-- =================================================================== -->
	<target name="run" depends="compile" description="Run the program">
		<!--<copy todir="${build}">
       <fileset dir="${lib.dir}" >
          <include name="*.jar" />
          <include name="*.zip" />
       </fileset>
    </copy>-->
		<java classname="${main.class}" fork="true">
			<classpath refid="classpath"/>
		</java>
	<!--		
		<java jar="${build.dir}/${jarname}" fork="yes">
			<classpath refid="classpath"/>
		</java> -->
	</target>
	
	<!-- =================================================================== -->
	<!-- Runs the JUnit Test                                                 -->
	<!-- =================================================================== -->
	<target name="junit" depends="compile" description="Runs the JUnit tests">
		<delete dir="${test.junit.dir}"/>
		<delete dir="${test.jacoco.dir}"/>
		<mkdir dir="${tests.junit.dir}"/>
		<mkdir dir="${tests.jacoco.dir}"/>
		<jacoco:coverage destfile="lib/jacoco.exec">
			<junit printsummary="withOutAndErr" haltonfailure="yes" fork="on">
		    	<classpath>
		    		<path refid="classpath" />
		    	</classpath>
		    	<formatter type="xml"/>
		    	<batchtest todir="${tests.junit.dir}">
		    		<fileset dir="${source.dir}">
		        		<include name="**/*Test*.java"/>
		        	</fileset>
		    	</batchtest>
		    </junit>
		</jacoco:coverage>
		
		<junitreport todir="${tests.junit.dir}">
			<fileset dir="${tests.junit.dir}">
		    	<include name="TEST-*.xml"/>
		    </fileset>
		   	<report format="frames" styledir="${lib.dir}" todir="${tests.junit.dir}" />
		</junitreport>
		        
		<jacoco:report>
			<executiondata>
		    	<file file="lib/jacoco.exec"/>
		    </executiondata>
		    <structure name="Memoranda">
		    	<classfiles>
		        	<fileset dir="${build.classes.dir}"/>
		        </classfiles>
		        	<sourcefiles encoding="UTF-8">
		            	<fileset dir="src"/>
		            </sourcefiles>
		   	</structure>
			<html destdir="${tests.jacoco.dir}"/>
		   	<xml destfile="${tests.jacoco.dir}/jacoco.xml"/>
		    <csv destfile="${tests.jacoco.dir}/jacoco.csv"/>
		</jacoco:report>
	</target>

	<!-- =================================================================== -->
	<!-- Runs findbugs                                                       -->
	<!-- =================================================================== -->
	<target name="findbugs" depends="compile" description="Runs findbugs">
		<mkdir dir="${tests.findbugs.dir}"/>
		<findbugs home="${lib.dir}"
			reportLevel="high"
			output="html"
		    outputFile="${tests.findbugs.dir}/findbugs.html" >
		    <auxClasspath refid="classpath"/>
		    <sourcePath path="${source.dir}" />
		    <class location="${build.classes.dir}" />
		</findbugs>
	</target>
	
	<!-- =================================================================== -->
	<!-- Runs checkstyle                                                     -->
	<!-- =================================================================== -->
	<target name="checkstyle" depends="compile" description="Runs checkstyle">
		<mkdir dir="${tests.checkstyle.dir}"/>
		<checkstyle config="${lib.dir}/CST316CheckstyleConfig.xml"
		              failureProperty="checkstyle.failure"
		              failOnViolation="false">
			<classpath>
				<path refid = "classpath"/>
			</classpath>
		    <formatter type="xml" tofile="${tests.checkstyle.dir}/checkstyle_report.xml"/>
		    <fileset dir="${source.dir}" includes="**/*.java"/>
		</checkstyle>
	</target>
	
</project>

